version: '3.8'

services:
  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: rag-chatbot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: rag-chatbot-qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped


  # Backend API (optional - for full Docker deployment)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag-chatbot-backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    profiles:
      - full-stack

  # Frontend (optional - for full Docker deployment)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag-chatbot-frontend
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - full-stack

volumes:
  redis_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  default:
    name: rag-chatbot-network